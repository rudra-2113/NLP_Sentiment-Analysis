# -*- coding: utf-8 -*-
"""NLP_Sentiment_Analysis_All Classification models.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vbzWlKWgsz_69kN6lngncOpyecw8QhJn
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import sklearn

from google.colab import drive
drive.mount("/content/gdrive")

ds=pd.read_csv("/content/gdrive/My Drive/Dataset/Restaurant_Reviews.tsv" ,delimiter= '\t',quoting=3)
print("applying sentiment analysis on NLP using all classifiication model")
import re
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
cleaned_review= list()
for i in range (0,1000):
    review= re.sub('[^a-zA-Z]', ' ', ds.iloc[i,0])
    review= review.lower()
    review= review.split()
    ps=PorterStemmer()
    all_stopwords= stopwords.words('english')
    all_stopwords.remove('not')
    review=[ps.stem(X) for X in review if not X in set (all_stopwords)]
    review= ' '.join(review)
    cleaned_review.append(review)

from sklearn.feature_extraction.text import CountVectorizer
c_v=CountVectorizer(max_features=1500)
X=c_v.fit_transform(cleaned_review).toarray()
y=ds.iloc[:,-1].values
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test= train_test_split(X,y,test_size=0.2,random_state=0)

print("for Naive Bayes Classifier")
from sklearn.naive_bayes import GaussianNB
classifier=GaussianNB()
classifier.fit(X_train,y_train)
y_pred=classifier.predict(X_test)
from sklearn.metrics import confusion_matrix,accuracy_score
cf=confusion_matrix(y_test,y_pred)
print("the accuracy score for Naive Bayes")
accuracy_naive=accuracy_score(y_test,y_pred)
print(accuracy_naive )

print("for logistic regression")
from sklearn.linear_model import LogisticRegression
classifier=LogisticRegression(random_state=0)
classifier.fit(X_train,y_train)
y_pred=classifier.predict(X_test)
from sklearn.metrics import confusion_matrix,accuracy_score
cf=confusion_matrix(y_test,y_pred)
print("the accuracy score for Logistic Regression")
accuracy_LR= accuracy_score(y_test,y_pred)
print(accuracy_LR)

print("for K-NN classifier")
from sklearn.neighbors import KNeighborsClassifier
classifier=KNeighborsClassifier(n_neighbors=5,metric='minkowski',p=2)
classifier.fit(X_train,y_train)
y_pred=classifier.predict(X_test)
from sklearn.metrics import confusion_matrix,accuracy_score
cf=confusion_matrix(y_test,y_pred)
print("the accuracy score for K-NN")
accuracy_KNN=accuracy_score(y_test,y_pred)
print(accuracy_KNN)

print("for linear SVM ")
from sklearn.svm import SVC
classifier=SVC(kernel='linear', random_state=0)
classifier.fit(X_train,y_train)
y_pred=classifier.predict(X_test)
from sklearn.metrics import confusion_matrix,accuracy_score
cf=confusion_matrix(y_test,y_pred)
print("the accuracy score for linear SVM")
accuracy_SVM=accuracy_score(y_test,y_pred)
print(accuracy_SVM)

print("for non-linear SVM ")
from sklearn.svm import SVC
classifier=SVC(kernel='rbf', random_state=0)
classifier.fit(X_train,y_train)
y_pred=classifier.predict(X_test)
from sklearn.metrics import confusion_matrix,accuracy_score
cf=confusion_matrix(y_test,y_pred)
print("the accuracy score for linear SVM")
accuracy_nSVM=accuracy_score(y_test,y_pred)
print(accuracy_nSVM)

print("for Decision Tree ")
from sklearn.tree import DecisionTreeClassifier
classifier=DecisionTreeClassifier(criterion='entropy', random_state=0)
classifier.fit(X_train,y_train)
y_pred=classifier.predict(X_test)
from sklearn.metrics import confusion_matrix,accuracy_score
cf=confusion_matrix(y_test,y_pred)
print("the accuracy score for Decision Tree")
accuracy_DT=accuracy_score(y_test,y_pred)
print(accuracy_DT)

print("for Random Forest")
from sklearn.ensemble import RandomForestClassifier
classifier=RandomForestClassifier(n_estimators=10,criterion='entropy', random_state=0)
classifier.fit(X_train,y_train)
y_pred=classifier.predict(X_test)
from sklearn.metrics import confusion_matrix,accuracy_score
cf=confusion_matrix(y_test,y_pred)
print("the accuracy score for Random Forest")
accuracy_RF=accuracy_score(y_test,y_pred)
print(accuracy_RF)

max_accuracy= max(accuracy_naive,accuracy_LR,accuracy_KNN,accuracy_SVM,accuracy_nSVM,accuracy_DT,accuracy_RF)
print(max_accuracy)